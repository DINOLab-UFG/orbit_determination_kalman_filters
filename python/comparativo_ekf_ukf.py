# -*- coding: utf-8 -*-
"""Comparativo_EKF/UKF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PYneZDl8794guacUIIFbj2a_Z_6Rfflg

Implementação do MAE e RMSE como métricas para comparar o desempenho dos filtros
"""

import numpy as np

# Dados verdadeiros e estimados do EKF e UKF
dados = {
    "EKF": {
        "verdadeiro": [6977.560588, 0.001254, 1.711511, 3.287587, 1.385704, 4.966519, -6895.496025, -948.596259, 456.246600],
        "estimado": [6978.309586, 0.006647, 1.711600, 3.287593, 4.838395, 1.513828, -6895.496025, -948.596259, 456.246600]
    },
    "UKF": {
        "verdadeiro": [6977.560588, 0.001254, 1.711511, 3.287587, 1.385704, 4.966519, -6895.496025, -948.596259, 456.246600],
        "estimado": [6974.977808, 0.001044, 1.711585, 3.287592, 1.692568, 4.659654, -6895.496025, -948.596259, 456.246600]
    }
}

# Função para calcular o RMSE
def calcular_rmse(verdadeiro, estimado):
    return np.sqrt(np.mean((np.array(estimado) - np.array(verdadeiro)) ** 2))

# Calculando o RMSE para EKF e UKF
rmse_ekf = calcular_rmse(dados["EKF"]["verdadeiro"], dados["EKF"]["estimado"])
rmse_ukf = calcular_rmse(dados["UKF"]["verdadeiro"], dados["UKF"]["estimado"])

rmse_ekf, rmse_ukf

# Função para calcular o MAE
def calcular_mae(verdadeiro, estimado):
    return np.mean(np.abs(np.array(estimado) - np.array(verdadeiro)))
mae_ekf = calcular_mae(dados["EKF"]["verdadeiro"], dados["EKF"]["estimado"])
mae_ukf = calcular_mae(dados["UKF"]["verdadeiro"], dados["UKF"]["estimado"])
mae_ekf, mae_ukf